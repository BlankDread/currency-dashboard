import streamlit as st
import pandas as pd
import requests
import plotly.express as px
from datetime import datetime
from sklearn.linear_model import LinearRegression
import numpy as np

# üåê –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è
LANGUAGES = {
    "üá¨üáß English": {
        "title": "üí± Currency Dashboard",
        "base_currency": "Base Currency",
        "compare_with": "üí± Compare with:",
        "start_date": "üìÖ Start Date",
        "end_date": "üìÖ End Date",
        "min": "Min",
        "avg": "Average",
        "max": "Max",
        "stats": "üìä Currency Statistics",
        "chart": "üìà Exchange Rate Chart + Forecast",
        "download": "üíæ Download CSV",
        "error": "‚ùå Failed to load data. Check your connection or date range."
    },
    "üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞": {
        "title": "üí± –í–∞–ª—é—Ç–Ω–∏–π –¥–∞—à–±–æ—Ä–¥",
        "base_currency": "–ë–∞–∑–æ–≤–∞ –≤–∞–ª—é—Ç–∞",
        "compare_with": "üí± –ü–æ—Ä—ñ–≤–Ω—è—Ç–∏ –∑:",
        "start_date": "üìÖ –ü–æ—á–∞—Ç–∫–æ–≤–∞ –¥–∞—Ç–∞",
        "end_date": "üìÖ –ö—ñ–Ω—Ü–µ–≤–∞ –¥–∞—Ç–∞",
        "min": "–ú—ñ–Ω—ñ–º—É–º",
        "avg": "–°–µ—Ä–µ–¥–Ω—î",
        "max": "–ú–∞–∫—Å–∏–º—É–º",
        "stats": "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞–ª—é—Ç",
        "chart": "üìà –ì—Ä–∞—Ñ—ñ–∫ —Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑",
        "download": "üíæ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ CSV",
        "error": "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∑'—î–¥–Ω–∞–Ω–Ω—è –∞–±–æ –¥—ñ–∞–ø–∞–∑–æ–Ω –¥–∞—Ç."
    }
}

# –§–ª–∞–≥–∏ –≤–∞–ª—é—Ç
CURRENCY_FLAGS = {
    "USD": "üá∫üá∏",
    "EUR": "üá™üá∫",
    "GBP": "üá¨üáß",
    "CNY": "üá®üá≥",
    "JPY": "üáØüáµ",
    "CHF": "üá®üá≠",
    "CAD": "üá®üá¶",
    "AUD": "üá¶üá∫"
}

st.set_page_config(page_title="Currency Dashboard", layout="wide")

# --- –°–∞–π–¥–±–∞—Ä: —è–∑—ã–∫ –∏ –±–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞ ---
lang_choice = st.sidebar.selectbox("üåç Language / –ú–æ–≤–∞", list(LANGUAGES.keys()))
t = LANGUAGES[lang_choice]

ALL_CURRENCIES = list(CURRENCY_FLAGS.keys())
base_currency = st.sidebar.selectbox(t["base_currency"], ALL_CURRENCIES, index=0)

# --- –í—ã–±–æ—Ä –≤–∞–ª—é—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
available_targets = [cur for cur in ALL_CURRENCIES if cur != base_currency]
def display_currency(cur): return f"{CURRENCY_FLAGS.get(cur, '')} {cur}"
selected_currencies = st.sidebar.multiselect(
    t["compare_with"], available_targets, default=available_targets[:2], format_func=display_currency
)

# --- –ò–Ω—Ñ–æ-–±–ª–æ–∫
with st.sidebar.expander("‚ÑπÔ∏è Info / –ü—Ä–æ –ø—Ä–æ—î–∫—Ç"):
    st.markdown("""
    This dashboard uses [Frankfurter API](https://www.frankfurter.app/) to show daily exchange rates.

    **Instructions:**
    - Select base currency üí∂
    - Pick a date range üìÖ
    - Choose currencies to compare ‚úÖ
    - View trends and 7-day forecast üìä
    - Export data üíæ

    Made with ‚ù§Ô∏è and [Streamlit](https://streamlit.io)
    """)

# --- –ó–∞–≥–æ–ª–æ–≤–æ–∫ –±–µ–∑ –±–∞–≥–∞
st.markdown("## üí∂ Live Exchange Rates Dashboard")
st.markdown("Compare üìà currencies over time and get a 7-day forecast üîÆ.")
st.markdown("---")

# --- –î–∞—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
default_start = datetime(2025, 1, 1).date()
default_end = datetime(2025, 5, 13).date()
col1, col2 = st.columns(2)
start_date = col1.date_input(t["start_date"], default_start, min_value=datetime(2000, 1, 1).date(), max_value=default_end)
end_date = col2.date_input(t["end_date"], default_end, min_value=start_date, max_value=datetime.today().date())

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data(show_spinner=False)
def fetch_rates(start, end, base, symbols):
    url = f"https://api.frankfurter.app/{start}..{end}?from={base}&to={','.join(symbols)}"
    response = requests.get(url)
    if response.status_code != 200:
        raise Exception("API request failed.")
    data = response.json().get('rates', {})
    if not data:
        raise Exception("No data returned from API.")
    df = pd.DataFrame(data).T
    df.index = pd.to_datetime(df.index)
    return df.sort_index()

# --- –ü—Ä–æ–≥–Ω–æ–∑ (7 –¥–Ω–µ–π –≤–ø–µ—Ä—ë–¥)
def add_forecast(df, days=7):
    df_forecast = df.copy()
    for col in df.columns:
        y = df[col].values
        x = np.arange(len(y)).reshape(-1, 1)
        model = LinearRegression().fit(x, y)
        x_future = np.arange(len(y), len(y) + days).reshape(-1, 1)
        y_future = model.predict(x_future)
        forecast_dates = pd.date_range(df.index[-1] + pd.Timedelta(days=1), periods=days)
        df_future = pd.DataFrame(y_future, index=forecast_dates, columns=[col])
        df_forecast = pd.concat([df_forecast, df_future])
    return df_forecast

# --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
if start_date > end_date:
    st.warning("‚ö†Ô∏è Start date must be before end date.")
elif not selected_currencies:
    st.warning("‚ö†Ô∏è Please select at least one currency to compare.")
else:
    try:
        df = fetch_rates(start_date, end_date, base_currency, selected_currencies)

        if df.empty:
            st.warning("‚ö†Ô∏è No data available for the selected dates.")
        else:
            # –ú–µ—Ç—Ä–∏–∫–∏
            st.markdown("### üìä " + t["stats"])
            for currency in selected_currencies:
                flag = CURRENCY_FLAGS.get(currency, "")
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.success(f"{flag} {currency} ({t['min']}): {df[currency].min():.2f}")
                with col2:
                    st.info(f"{flag} {currency} ({t['avg']}): {df[currency].mean():.2f}")
                with col3:
                    st.warning(f"{flag} {currency} ({t['max']}): {df[currency].max():.2f}")

            # –ü—Ä–æ–≥–Ω–æ–∑ –∏ –≥—Ä–∞—Ñ–∏–∫
            st.markdown("### üìà " + t["chart"])
            df_extended = add_forecast(df)
            fig = px.line(df_extended, x=df_extended.index, y=selected_currencies,
                          labels={'value': 'Rate', 'index': 'Date'},
                          title=f"Rates + Forecast (next 7 days) relative to {base_currency}")
            fig.update_layout(
                title_x=0.5,
                legend=dict(orientation="h", yanchor="bottom", y=-0.3, xanchor="center", x=0.5),
                margin=dict(l=40, r=40, t=40, b=40),
                height=500
            )
            st.plotly_chart(fig, use_container_width=True)

            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ CSV
            csv = df.to_csv().encode('utf-8')
            st.download_button(t["download"], data=csv, file_name="exchange_rates.csv", mime='text/csv')

    except Exception as e:
        st.error(t["error"])
        st.code(str(e))

# --- –§—É—Ç–µ—Ä
st.markdown("---")
st.markdown("¬© 2025 Created by Your Name. Powered by üíª Python & Streamlit. Data from üì° Frankfurter API.")
